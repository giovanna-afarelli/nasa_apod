// Mocks generated by Mockito 5.4.4 from annotations
// in nasa_apod/test/app/presentation/pages/home_page/controllers/home_page_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mobx/mobx.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nasa_apod/app/domain/entities/apod.dart' as _i5;
import 'package:nasa_apod/app/domain/usecases/get_apod_from_local_storage_usecase.dart'
    as _i10;
import 'package:nasa_apod/app/domain/usecases/get_apod_images_list_usecase.dart'
    as _i6;
import 'package:nasa_apod/app/domain/usecases/save_most_recent_apod_in_local_storage_usecase.dart'
    as _i9;
import 'package:nasa_apod/app/presentation/pages/home_page/stores/home_page_store.dart'
    as _i4;
import 'package:nasa_apod/shared/errors/failure.dart' as _i8;
import 'package:nasa_apod/shared/usecase.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeObservableList_0<T> extends _i1.SmartFake
    implements _i2.ObservableList<T> {
  _FakeObservableList_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_1 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_2 extends _i1.SmartFake
    implements _i2.ReactiveContext {
  _FakeReactiveContext_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_3<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomePageStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomePageStore extends _i1.Mock implements _i4.HomePageStore {
  @override
  _i2.ObservableList<_i5.Apod> get imagesList => (super.noSuchMethod(
        Invocation.getter(#imagesList),
        returnValue: _FakeObservableList_0<_i5.Apod>(
          this,
          Invocation.getter(#imagesList),
        ),
        returnValueForMissingStub: _FakeObservableList_0<_i5.Apod>(
          this,
          Invocation.getter(#imagesList),
        ),
      ) as _i2.ObservableList<_i5.Apod>);

  @override
  set imagesList(_i2.ObservableList<_i5.Apod>? value) => super.noSuchMethod(
        Invocation.setter(
          #imagesList,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isLoadingMoreImages => (super.noSuchMethod(
        Invocation.getter(#isLoadingMoreImages),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isLoadingMoreImages(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isLoadingMoreImages,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasErrorLoadingMoreImages => (super.noSuchMethod(
        Invocation.getter(#hasErrorLoadingMoreImages),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set hasErrorLoadingMoreImages(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #hasErrorLoadingMoreImages,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set searchTerm(String? value) => super.noSuchMethod(
        Invocation.setter(
          #searchTerm,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set searchResult(List<_i5.Apod>? value) => super.noSuchMethod(
        Invocation.setter(
          #searchResult,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get page => (super.noSuchMethod(
        Invocation.getter(#page),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set page(int? value) => super.noSuchMethod(
        Invocation.setter(
          #page,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get endDate => (super.noSuchMethod(
        Invocation.getter(#endDate),
        returnValue: _FakeDateTime_1(
          this,
          Invocation.getter(#endDate),
        ),
        returnValueForMissingStub: _FakeDateTime_1(
          this,
          Invocation.getter(#endDate),
        ),
      ) as DateTime);

  @override
  DateTime get startDate => (super.noSuchMethod(
        Invocation.getter(#startDate),
        returnValue: _FakeDateTime_1(
          this,
          Invocation.getter(#startDate),
        ),
        returnValueForMissingStub: _FakeDateTime_1(
          this,
          Invocation.getter(#startDate),
        ),
      ) as DateTime);

  @override
  _i2.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_2(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeReactiveContext_2(
          this,
          Invocation.getter(#context),
        ),
      ) as _i2.ReactiveContext);

  @override
  void setImagesList(List<_i5.Apod>? list) => super.noSuchMethod(
        Invocation.method(
          #setImagesList,
          [list],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setIsLoadingMoreImages(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setIsLoadingMoreImages,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setHasErrorLoadingMoreImages(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setHasErrorLoadingMoreImages,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setSearchTerm(String? value) => super.noSuchMethod(
        Invocation.method(
          #setSearchTerm,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setSearchResult(List<_i5.Apod>? list) => super.noSuchMethod(
        Invocation.method(
          #setSearchResult,
          [list],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setPage(int? value) => super.noSuchMethod(
        Invocation.method(
          #setPage,
          [value],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GetApodImagesListUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetApodImagesListUsecase extends _i1.Mock
    implements _i6.GetApodImagesListUsecase {
  @override
  _i7.Future<_i3.Either<_i8.Failure, List<_i5.Apod>>> call(
          _i6.GetApodImagesListUsecaseParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Failure, List<_i5.Apod>>>.value(
            _FakeEither_3<_i8.Failure, List<_i5.Apod>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.Either<_i8.Failure, List<_i5.Apod>>>.value(
                _FakeEither_3<_i8.Failure, List<_i5.Apod>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, List<_i5.Apod>>>);
}

/// A class which mocks [SaveMostRecentApodInLocalStorageUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveMostRecentApodInLocalStorageUsecase extends _i1.Mock
    implements _i9.SaveMostRecentApodInLocalStorageUsecase {
  @override
  _i7.Future<_i3.Either<_i8.Failure, bool>> call(
          _i9.SaveMostRecentApodInLocalStorageUsecaseParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Failure, bool>>.value(
            _FakeEither_3<_i8.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.Either<_i8.Failure, bool>>.value(
                _FakeEither_3<_i8.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, bool>>);
}

/// A class which mocks [GetApodFromLocalStorageUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetApodFromLocalStorageUsecase extends _i1.Mock
    implements _i10.GetApodFromLocalStorageUsecase {
  @override
  _i7.Future<_i3.Either<_i8.Failure, _i5.Apod>> call(_i11.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Failure, _i5.Apod>>.value(
            _FakeEither_3<_i8.Failure, _i5.Apod>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.Either<_i8.Failure, _i5.Apod>>.value(
                _FakeEither_3<_i8.Failure, _i5.Apod>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, _i5.Apod>>);
}
